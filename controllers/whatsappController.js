const axios = require('axios');
const { updateCart, finalizePurchase } = require('../services/cartService');
const { getAllProducts } = require('../services/productService');

const userStates = {};
const token = process.env.WHATSAPP_TOKEN;
const apiUrl = 'https://graph.facebook.com/v15.0';

async function receiveMessage(req, res) {
  try {
    const body = req.body;
    if (
      body.object &&
      body.entry &&
      body.entry[0].changes &&
      body.entry[0].changes[0].value.messages
    ) {
      const changes = body.entry[0].changes[0].value;
      const messages = changes.messages;
      const phoneNumberId = changes.metadata.phone_number_id;
      for (const msg of messages) {
        const from = msg.from;
        console.log(`üì© Recebida mensagem de ${from}`, msg);
        if (msg.type === 'interactive' && msg.interactive.button_reply) {
          const buttonId = msg.interactive.button_reply.id;
          await handleButtonClick(buttonId, phoneNumberId, from);
        } else if (msg.type === 'text' && msg.text) {
          const textBody = msg.text.body.trim();
          await handleTextInput(textBody, phoneNumberId, from);
        }
      }
    }
    res.sendStatus(200);
  } catch (error) {
    console.error('‚ùå Erro ao receber mensagem:', error?.response?.data || error.message);
    res.sendStatus(500);
  }
}

async function handleButtonClick(buttonId, phoneNumberId, from) {
  switch (buttonId) {
    // MENU PRINCIPAL e FAQ
    case 'FAQ_PAGE_1':
      await sendFAQMenuPage1(phoneNumberId, from);
      break;
    case 'COMPRAR':
      await sendPurchaseMenu(phoneNumberId, from);
      break;
    // FAQ P√°gina 1
    case 'FAQ_PAGAMENTO':
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        '‚ùì *Formas de Pagamento:*\n\nAceitamos cart√£o, d√©bito, Pix e boleto.',
        'FAQ_PAGE_1',
        '‚Ü©Ô∏è Voltar'
      );
      break;
    case 'FAQ_PRAZO':
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        '‚è∞ *Prazo de Entrega:*\n\n3 a 7 dias √∫teis, conforme a regi√£o.',
        'FAQ_PAGE_1',
        '‚Ü©Ô∏è Voltar'
      );
      break;
    case 'FAQ_PAGE_2':
      await sendFAQMenuPage2(phoneNumberId, from);
      break;
    // FAQ P√°gina 2
    case 'FAQ_ATENDENTE':
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        'üìû *Atendimento:*\n\nEntre em contato via e-mail: suporte@nobuggy.com.br ou pelo chat online.',
        'FAQ_PAGE_2',
        '‚Ü©Ô∏è Voltar'
      );
      break;
    case 'FAQ_TROCAS':
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        'üîÑ *Trocas/Devolu√ß√µes:*\n\nSolicite troca ou devolu√ß√£o em at√© 7 dias ap√≥s o recebimento.',
        'FAQ_PAGE_2',
        '‚Ü©Ô∏è Voltar'
      );
      break;
    case 'FAQ_BACK':
      await sendFAQMenuPage1(phoneNumberId, from);
      break;
    // Menu de Compras ‚Äì Cat√°logo
    case 'VER_PRODUTOS':
      await sendCatalogImage(
        phoneNumberId,
        from,
        'https://site-nobuggy.s3.sa-east-1.amazonaws.com/imgteste.png',
        'üñºÔ∏è Confira nosso Cat√°logo!'
      );
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        'Acima est√° nosso cat√°logo!\n\nüëâ Digite o *ID do produto* que deseja (ex.: "3").',
        'MENU_COMPRA_VOLTA',
        '‚Ü©Ô∏è Voltar'
      );
      userStates[from] = { step: 'AWAITING_ID', tempProductId: null };
      break;
    case 'VER_CARRINHO': {
      const cartMsg = updateCart(from);
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        `üõí Seu carrinho:\n${cartMsg}`,
        'MENU_COMPRA_VOLTA',
        '‚Ü©Ô∏è Voltar'
      );
      break;
    }
    case 'FINALIZAR_COMPRA': {
      const finalMsg = finalizePurchase(from);
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        `‚úÖ ${finalMsg}`,
        'MENU_PRINCIPAL',
        '‚Ü©Ô∏è Voltar ao In√≠cio'
      );
      break;
    }
    case 'MENU_COMPRA_VOLTA':
      await sendPurchaseMenu(phoneNumberId, from);
      break;
    case 'MENU_PRINCIPAL':
      await sendMainMenu(phoneNumberId, from);
      break;
    default:
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        '‚ùå N√£o entendi seu clique.',
        'MENU_PRINCIPAL',
        '‚Ü©Ô∏è Voltar ao In√≠cio'
      );
      break;
  }
}

async function handleTextInput(textBody, phoneNumberId, from) {
  const state = userStates[from] || { step: null, tempProductId: null };
  if (state.step === 'AWAITING_ID') {
    const allProds = getAllProducts();
    console.log('üì¶ Produtos dispon√≠veis:', allProds);
    const chosen = allProds.find(p => p.id === textBody);
    if (!chosen) {
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        '‚ö†Ô∏è Produto n√£o encontrado. Digite novamente o ID, ou "menu" para voltar.',
        'MENU_COMPRA_VOLTA',
        '‚Ü©Ô∏è Voltar'
      );
      return;
    }
    userStates[from] = { step: 'AWAITING_QTY', tempProductId: chosen.id };
    await sendInteractiveSingle(
      phoneNumberId,
      from,
      `üî¢ Quantas unidades de *${chosen.name}* voc√™ deseja? Envie apenas um n√∫mero inteiro (ex.: "1" ou "3"). A quantidade n√£o pode ser 0 ou negativa.`,
      'MENU_COMPRA_VOLTA',
      '‚Ü©Ô∏è Voltar'
    );
    return;
  }
  if (state.step === 'AWAITING_QTY') {
    const qty = parseInt(textBody, 10);
    if (isNaN(qty) || qty <= 0) {
      await sendInteractiveSingle(
        phoneNumberId,
        from,
        '‚ö†Ô∏è Quantidade inv√°lida! Digite um n√∫mero inteiro maior que zero.',
        'MENU_COMPRA_VOLTA',
        '‚Ü©Ô∏è Voltar'
      );
      return;
    }
    const prodId = state.tempProductId;
    const confirmationMsg = updateCart(from, prodId, qty);
    userStates[from] = { step: null, tempProductId: null };
    await sendInteractiveSingle(
      phoneNumberId,
      from,
      `‚úÖ ${confirmationMsg}`,
      'MENU_COMPRA_VOLTA',
      '‚Ü©Ô∏è Voltar'
    );
    const cartMsg = updateCart(from);
    await sendInteractiveSingle(
      phoneNumberId,
      from,
      `üõí *Seu Carrinho Atual:*\n${cartMsg}`,
      'MENU_COMPRA_VOLTA',
      '‚Ü©Ô∏è Voltar'
    );
    return;
  }
  await sendMainMenu(phoneNumberId, from);
}

async function sendMainMenu(phoneNumberId, to) {
  try {
    const bodyText = 'üëã Ol√°! Bem-vindo(a) ao Bot de teste.\n\nüëâ Escolha uma op√ß√£o:';
    const buttons = [
      { id: 'FAQ_PAGE_1', title: '‚ùì FAQ' },
      { id: 'COMPRAR', title: 'üõçÔ∏è Comprar' }
    ];
    const responseData = makeInteractiveButtons(to, bodyText, buttons);
    await callSendAPI(phoneNumberId, responseData);
  } catch (error) {
    console.error('Erro ao enviar menu inicial:', error?.response?.data || error.message);
  }
}

async function sendPurchaseMenu(phoneNumberId, to) {
  try {
    const bodyText = 'üõçÔ∏è *Menu de Compras:*\n\nüëâ Escolha uma op√ß√£o:';
    const buttons = [
      { id: 'VER_PRODUTOS', title: 'üìñ Ver Produtos' },
      { id: 'VER_CARRINHO', title: 'üõí Meu Carrinho' },
      { id: 'FINALIZAR_COMPRA', title: '‚úÖ Finalizar Compra' }
    ];
    const responseData = makeInteractiveButtons(to, bodyText, buttons);
    await callSendAPI(phoneNumberId, responseData);
  } catch (error) {
    console.error('Erro ao enviar menu de compras:', error?.response?.data || error.message);
  }
}

async function sendFAQMenuPage1(phoneNumberId, to) {
  try {
    const bodyText = '*‚ùì FAQ - P√°gina 1*\n\n1Ô∏è‚É£ Formas de Pagamento\n2Ô∏è‚É£ Prazo de Entrega\n\nDigite "menu" para voltar.\n\nüëâ Selecione um t√≥pico:';
    const buttons = [
      { id: 'FAQ_PAGAMENTO', title: 'üí≥ Pagamento' },
      { id: 'FAQ_PRAZO', title: '‚è∞ Prazo' },
      { id: 'FAQ_PAGE_2', title: '‚û°Ô∏è Mais FAQ' }
    ];
    const responseData = makeInteractiveButtons(to, bodyText, buttons);
    await callSendAPI(phoneNumberId, responseData);
  } catch (error) {
    console.error('Erro ao enviar FAQ (p√°gina 1):', error?.response?.data || error.message);
  }
}

async function sendFAQMenuPage2(phoneNumberId, to) {
  try {
    const bodyText = '*‚ùì FAQ - P√°gina 2*\n\n1Ô∏è‚É£ Atendimento\n2Ô∏è‚É£ Trocas/Devolu√ß√µes\n\nDigite "menu" para voltar.\n\nüëâ Selecione um t√≥pico:';
    const buttons = [
      { id: 'FAQ_ATENDENTE', title: '‚òéÔ∏è Atendimento' },
      { id: 'FAQ_TROCAS', title: 'üîÑ Trocas' },
      { id: 'FAQ_BACK', title: '‚¨ÖÔ∏è Voltar' }
    ];
    const responseData = makeInteractiveButtons(to, bodyText, buttons);
    await callSendAPI(phoneNumberId, responseData);
  } catch (error) {
    console.error('Erro ao enviar FAQ (p√°gina 2):', error?.response?.data || error.message);
  }
}

async function sendCatalogImage(phoneNumberId, to, imageUrl, caption) {
  try {
    const responseData = {
      messaging_product: 'whatsapp',
      to,
      type: 'image',
      image: { link: imageUrl, caption }
    };
    await callSendAPI(phoneNumberId, responseData);
  } catch (error) {
    console.error('Erro ao enviar imagem do cat√°logo:', error?.response?.data || error.message);
  }
}

async function sendInteractiveSingle(phoneNumberId, to, message, buttonId, buttonTitle) {
  try {
    const responseData = {
      messaging_product: 'whatsapp',
      to,
      type: 'interactive',
      interactive: {
        type: 'button',
        body: { text: message },
        action: {
          buttons: [{ type: 'reply', reply: { id: buttonId, title: buttonTitle } }]
        }
      }
    };
    await callSendAPI(phoneNumberId, responseData);
  } catch (error) {
    console.error('Erro ao enviar mensagem interativa single:', error?.response?.data || error.message);
  }
}

function makeInteractiveButtons(to, bodyText, buttons) {
  return {
    messaging_product: 'whatsapp',
    to,
    type: 'interactive',
    interactive: {
      type: 'button',
      body: { text: bodyText },
      action: { buttons: buttons.map(b => ({ type: 'reply', reply: { id: b.id, title: b.title } })) }
    }
  };
}

async function callSendAPI(phoneNumberId, responseData) {
  try {
    await axios.post(
      `${apiUrl}/${phoneNumberId}/messages`,
      responseData,
      { headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } }
    );
  } catch (error) {
    console.error('Erro ao enviar mensagem:', error?.response?.data || error.message);
  }
}

module.exports = { receiveMessage };
